import streamlit as st
import os
import cv2
import numpy as np
from ocr.pipeline import OCR_Pipeline
from extractor.field_extractor import FieldExtractor

# ===============================
# Load model OCR ch·ªâ 1 l·∫ßn
# ===============================
@st.cache_resource
def load_model():
    return OCR_Pipeline()

ocr_model = load_model()

# ===============================
# H√†m ch·∫°y pipeline OCR
# ===============================
def run_pipeline(image: np.ndarray):
    ocr_lines, cropped, cleaned = ocr_model.predict(image)
    return ocr_lines, cropped, cleaned

# ===============================
# Streamlit App
# ===============================
def main():
    st.set_page_config(page_title="CCCD OCR", layout="wide")
    st.title("ü™™ H·ªá th·ªëng ƒë·ªçc & tr√≠ch xu·∫•t th√¥ng tin CƒÉn C∆∞·ªõc C√¥ng D√¢n")
    
    uploaded_file = st.file_uploader("üì∏ T·∫£i ·∫£nh CCCD l√™n", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        file_bytes = np.frombuffer(uploaded_file.read(), np.uint8)
        image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

        # Hi·ªÉn th·ªã ·∫£nh g·ªëc
        st.image(cv2.cvtColor(image, cv2.COLOR_BGR2RGB), caption="·∫¢nh CCCD g·ªëc", width=500)

        # OCR Pipeline
        with st.spinner("‚è≥ ƒêang x·ª≠ l√Ω OCR..."):
            ocr_lines, cropped, cleaned = run_pipeline(image)

        st.subheader("K·∫øt qu·∫£ sau x·ª≠ l√Ω ·∫£nh")
        col1, col2 = st.columns(2)
        with col1:
            if cropped is not None and cropped.size > 0:
                st.image(cv2.cvtColor(cropped, cv2.COLOR_BGR2RGB),
                         caption="·∫¢nh sau khi crop", width=500)
        with col2:
            if cleaned is not None and cleaned.size > 0:
                st.image(cv2.cvtColor(cleaned, cv2.COLOR_BGR2RGB),
                         caption="·∫¢nh sau khi clean", width=500)

        # Hi·ªÉn th·ªã OCR raw
        if ocr_lines:
            st.subheader("üìú K·∫øt qu·∫£ OCR (Raw)")
            for line in ocr_lines[::-1]:
                st.write(line)

            # Gh√©p c√°c d√≤ng OCR l·∫°i
            ocr_text = " ".join(ocr_lines[::-1])

            # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ raw text OCR
            extractor = FieldExtractor()
            
            with st.spinner("üß† ƒêang h·∫≠u k·ª≥ OCR v√† tr√≠ch xu·∫•t..."):
                fields = extractor.extract(ocr_text)

            st.success("‚úÖ Ho√†n t·∫•t tr√≠ch xu·∫•t th√¥ng tin!")

            st.subheader("üîé Th√¥ng tin tr√≠ch xu·∫•t:")
            st.json(fields)

            # Hi·ªÉn th·ªã d·∫°ng ƒë·∫πp
            st.write("**S·ªë CCCD:** ", fields.get("id", ""))
            st.write("**H·ªç v√† t√™n:** ", fields.get("name", ""))
            st.write("**Ng√†y sinh:** ", fields.get("dob", ""))
            st.write("**Gi·ªõi t√≠nh:** ", fields.get("sex", ""))
            st.write("**Qu·ªëc t·ªãch:** ", fields.get("nationality", ""))
            st.write("**Qu√™ qu√°n:** ", fields.get("placeoforigin", ""))
            st.write("**ƒê·ªãa ch·ªâ/N∆°i ·ªü:** ", fields.get("placeofresidence", ""))

        else:
            st.text_area("VƒÉn b·∫£n OCR thu·∫ßn", ocr_text, height=200)

if __name__ == "__main__":
    main()
